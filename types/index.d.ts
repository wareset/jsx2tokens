export declare type TypeRange = [number, number];
export declare type TypeSourcePosition = {
    line: number;
    column: number;
};
export declare type TypeSourceLocation = {
    start: TypeSourcePosition;
    end: TypeSourcePosition;
};
export declare type TypeTokenType = typeof TOKEN_BOOLEAN | typeof TOKEN_IDENTIFIER | typeof TOKEN_KEYWORD | typeof TOKEN_NULL | typeof TOKEN_NUMERIC | typeof TOKEN_PUCNTUATOR | typeof TOKEN_REGULAR_EXPRESSION | typeof TOKEN_STRING | typeof TOKEN_TEMPLATE | typeof TOKEN_TEMPLATE_HEAD | typeof TOKEN_TEMPLATE_MIDDLE | typeof TOKEN_TEMPLATE_TAIL | typeof TOKEN_COMMENT_BLOCK | typeof TOKEN_COMMENT_LINE | typeof TOKEN_SPACE | typeof TOKEN_MODIFIER | typeof TOKEN_JSX_TAG_OPENER_START | typeof TOKEN_JSX_TAG_OPENER_END | typeof TOKEN_JSX_TAG_CLOSER_START | typeof TOKEN_JSX_TAG_CLOSER_END | typeof TOKEN_JSX_EXPRESSION_START | typeof TOKEN_JSX_EXPRESSION_END | typeof TOKEN_JSX_TEXT | typeof TOKEN_JSX_COMMENT;
export declare type TypeToken = {
    deep: number;
    type: TypeTokenType;
    value: string;
    range: TypeRange;
    loc: TypeSourceLocation;
};
export declare const TOKEN_BOOLEAN = "Boolean";
export declare const TOKEN_IDENTIFIER = "Identifier";
export declare const TOKEN_KEYWORD = "Keyword";
export declare const TOKEN_NULL = "Null";
export declare const TOKEN_NUMERIC = "Numeric";
export declare const TOKEN_PUCNTUATOR = "Punctuator";
export declare const TOKEN_REGULAR_EXPRESSION = "RegularExpression";
export declare const TOKEN_STRING = "String";
export declare const TOKEN_TEMPLATE = "Template";
export declare const TOKEN_TEMPLATE_HEAD = "TemplateHead";
export declare const TOKEN_TEMPLATE_MIDDLE = "TemplateMiddle";
export declare const TOKEN_TEMPLATE_TAIL = "TemplateTail";
export declare const TOKEN_COMMENT_BLOCK = "CommentBlock";
export declare const TOKEN_COMMENT_LINE = "CommentLine";
export declare const TOKEN_SPACE = "Space";
export declare const TOKEN_MODIFIER = "Modifier";
export declare const TOKEN_JSX_TAG_OPENER_START = "JSXTagOpenerStart";
export declare const TOKEN_JSX_TAG_OPENER_END = "JSXTagOpenerEnd";
export declare const TOKEN_JSX_TAG_CLOSER_START = "JSXTagCloserStart";
export declare const TOKEN_JSX_TAG_CLOSER_END = "JSXTagCloserEnd";
export declare const TOKEN_JSX_EXPRESSION_START = "JSXExpressionStart";
export declare const TOKEN_JSX_EXPRESSION_END = "JSXExpressionEnd";
export declare const TOKEN_JSX_TEXT = "JSXText";
export declare const TOKEN_JSX_COMMENT = "JSXComment";
export declare const CHILDLESS_TAGS: {
    readonly img: true;
    readonly area: true;
    readonly base: true;
    readonly br: true;
    readonly col: true;
    readonly embed: true;
    readonly hr: true;
    readonly input: true;
    readonly link: true;
    readonly meta: true;
    readonly param: true;
    readonly source: true;
    readonly track: true;
    readonly wbr: true;
};
export declare const jsx2tokens: <C extends {} | readonly [] = undefined>(_source: string, { strict, useJSX, insideJSX, parseStyleTags, parseScriptTags, considerChildlessTags, proxy }?: {
    strict?: boolean;
    useJSX?: boolean;
    insideJSX?: boolean;
    parseStyleTags?: boolean;
    parseScriptTags?: boolean;
    considerChildlessTags?: boolean;
    proxy?: (v: TypeToken, k: number, a: TypeToken[], ctx: C) => boolean | void;
}, ctx?: C) => TypeToken[];
