export declare type TypeRange = [number, number];
export declare type TypeSourcePosition = {
    line: number;
    column: number;
};
export declare type TypeSourceLocation = {
    start: TypeSourcePosition;
    end: TypeSourcePosition;
};
export declare type TypeTokenType = typeof TYPES[keyof typeof TYPES];
export declare type TypeToken = {
    deep: number;
    type: TypeTokenType;
    value: string;
    range?: TypeRange;
    loc?: TypeSourceLocation;
};
declare const TYPES: {
    readonly BOOLEAN: "Boolean";
    readonly IDENTIFIER: "Identifier";
    readonly KEYWORD: "Keyword";
    readonly NULL: "Null";
    readonly NUMERIC: "Numeric";
    readonly PUCNTUATOR: "Punctuator";
    readonly REGULAR_EXPRESSION: "RegularExpression";
    readonly STRING: "String";
    readonly TEMPLATE: "Template";
    readonly TEMPLATE_HEAD: "TemplateHead";
    readonly TEMPLATE_MIDDLE: "TemplateMiddle";
    readonly TEMPLATE_TAIL: "TemplateTail";
    readonly COMMENT_BLOCK: "CommentBlock";
    readonly COMMENT_LINE: "CommentLine";
    readonly SPACE: "Space";
    readonly MODIFIER: "Modifier";
    readonly JSX_TAG_OPENER_START: "JSXTagOpenerStart";
    readonly JSX_TAG_OPENER_END: "JSXTagOpenerEnd";
    readonly JSX_TAG_OPENER_END_CHILDLESS: "JSXTagOpenerEndChildless";
    readonly JSX_TAG_CLOSER_START: "JSXTagCloserStart";
    readonly JSX_TAG_CLOSER_END: "JSXTagCloserEnd";
    readonly JSX_EXPRESSION_START: "JSXExpressionStart";
    readonly JSX_EXPRESSION_END: "JSXExpressionEnd";
    readonly JSX_TEXT: "JSXText";
    readonly JSX_COMMENT: "JSXComment";
};
export { TYPES as TOKEN_TYPES };
export declare const CHILDLESS_TAGS: {
    area: boolean;
    base: boolean;
    br: boolean;
    col: boolean;
    command: boolean;
    embed: boolean;
    hr: boolean;
    img: boolean;
    input: boolean;
    keygen: boolean;
    link: boolean;
    meta: boolean;
    param: boolean;
    source: boolean;
    track: boolean;
    wbr: boolean;
};
export declare const jsx2tokens: <C extends {} | readonly [] = {}>(_source: string, { loc, range, strict, useJSX, insideJSX, skipStyleTags, skipScriptTags, parseScriptTags, considerChildlessTags, proxyCtx, proxy }?: {
    loc?: boolean;
    range?: boolean;
    strict?: boolean;
    useJSX?: boolean;
    insideJSX?: boolean;
    skipStyleTags?: boolean;
    skipScriptTags?: boolean;
    parseScriptTags?: boolean;
    considerChildlessTags?: boolean;
    proxyCtx?: C;
    proxy?: (v: TypeToken, k: number, a: TypeToken[], proxyCtx: C) => boolean | void;
}) => TypeToken[];
